{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["Control","styled","props","useState","value","setValue","newValue","Number","e","error","fullWidth","shrink","id","label","name","inputComponent","CurrencyInput","disabled","onBlur","inputProps","onChangeEvent","decimalSeparator","thousandSeparator","precision","inputType","allowNegative","notched","App","onChange","console","log","variant","ReactDOM","render","document","getElementById"],"mappings":"wgBAiCA,IAsHMA,EAAUC,YAAH,IAAGA,CAAH,K,EAtHyB,SAACC,G,MACXC,mBAAS,GAA5BC,OAAOC,OAEd,cACE,IAAMC,EAAWC,OACfC,qBACSN,EADTM,oCAGWN,EAHXM,iBADF,MAOAH,KACAH,cAGF,OAAKA,EAAD,SAAJ,aAAsBA,UAgCf,WAAIA,UAEP,uBAAaO,MAAOP,EAAMO,MAAOC,WAAS,GACxC,uBAAYD,MAAOP,EAAMO,MAAOE,QAAM,EAACC,GAAIV,EAAMW,OAC9CX,EAFL,OAIE,uBACEY,KAAMZ,EAAMY,KACZL,MAAOP,EAAMO,MACbC,WAAS,EACTK,eAAgBC,IAChBC,SAAUf,EAAMe,SAChBC,OAAQhB,EAAMgB,OACdC,WAAY,CACVP,GAAIV,EADM,GAEVE,MAAOF,SAFG,EAGVe,SAAUf,EAHA,SAIVkB,cAJU,EAKVC,iBAAkBnB,EALR,iBAMVoB,kBAAmBpB,EANT,kBAOVqB,UAAWrB,EAPD,UAQVsB,UAAWtB,EARD,UASVuB,cAAevB,EAAMuB,iBAGxBvB,QACC,uBAAgBO,MAAOP,EAAMO,OAC1BP,EAFJA,YAxBL,MAiCE,qBAASO,MAAOP,EAAMO,MAAOC,WAAS,GACpC,uBAAYD,MAAOP,EAAMO,MAAOE,QAAM,EAACC,GAAIV,EAAMW,OAC9CX,EAFL,OAIE,uBACEY,KAAMZ,EAAMY,KACZL,MAAOP,EAAMO,MACbiB,SAAO,EACPb,MAAOX,EAAMW,MACbH,WAAS,EACTK,eAAgBC,IAChBC,SAAUf,EAAMe,SAChBC,OAAQhB,EAAMgB,OACdC,WAAY,CACVP,GAAIV,EADM,GAEVE,MAAOF,SAFG,EAGVe,SAAUf,EAHA,SAIVkB,cAJU,EAKVC,iBAAkBnB,EALR,iBAMVoB,kBAAmBpB,EANT,kBAOVqB,UAAWrB,EAPD,UAQVsB,UAAWtB,EARD,UASVuB,cAAevB,EAAMuB,iBAGxBvB,QACC,uBAAgBO,MAAOP,EAAMO,OAC1BP,EAFJA,YA1BL,MA/DE,uBAAaO,MAAOP,EAAMO,MAAOC,WAAS,GACxC,uBAAYD,MAAOP,EAAMO,MAAOE,QAAM,EAACC,GAAIV,EAAMW,OAC9CX,EAFL,OAIE,uBACEY,KAAMZ,EAAMY,KACZL,MAAOP,EAAMO,MACbC,WAAS,EACTK,eAAgBC,IAChBC,SAAUf,EAAMe,SAChBC,OAAQhB,EAAMgB,OACdC,WAAY,CACVP,GAAIV,EADM,GAEVE,MAAOF,SAFG,EAGVe,SAAUf,EAHA,SAIVkB,cAJU,EAKVC,iBAAkBnB,EALR,iBAMVoB,kBAAmBpB,EANT,kBAOVqB,UAAWrB,EAPD,UAQVsB,UAAWtB,EARD,UASVuB,cAAevB,EAAMuB,iBAGxBvB,QACC,uBAAgBO,MAAOP,EAAMO,OAC1BP,EAFJA,YAxBL,OC9BWyB,EAdH,WACV,OACE,kBAAC,EAAD,CACEb,KAAK,UACLS,UAAU,IACVF,iBAAiB,IACjBC,kBAAkB,IAClBT,MAAM,UACNe,SAAU,SAACxB,GAAD,OAAWyB,QAAQC,IAAI1B,IACjC2B,QAAQ,cCVdC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.33efe898.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CurrencyInput from 'react-currency-input';\nimport {\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  OutlinedInput,\n  Input,\n  FilledInput\n} from '@material-ui/core';\n\ntype Props = {\n  value?: number;\n  onChange(value: number): void;\n  onBlur?(\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void;\n  precision: string;\n  label: string;\n  disabled?: boolean;\n  id?: string;\n  inputType?: string;\n  allowNegative?: boolean;\n  error?: boolean;\n  helperText?: string;\n  name?: string;\n\n  decimalSeparator: string;\n  thousandSeparator: string;\n\n  variant?: 'standard' | 'outlined' | 'filled';\n};\nconst NumericInput: React.FC<Props> = (props) => {\n  const [value, setValue] = useState(0);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = Number(\n      e.target.value\n        .split(props.thousandSeparator)\n        .join('')\n        .replace(props.decimalSeparator, '.')\n    );\n\n    setValue(newValue);\n    props.onChange(newValue);\n  }\n\n  if (!props.variant || props.variant === 'standard') {\n    return (\n      <FormControl error={props.error} fullWidth>\n        <InputLabel error={props.error} shrink id={props.label}>\n          {props.label}\n        </InputLabel>\n        <Input\n          name={props.name}\n          error={props.error}\n          fullWidth\n          inputComponent={CurrencyInput}\n          disabled={props.disabled}\n          onBlur={props.onBlur}\n          inputProps={{\n            id: props.id,\n            value: props.value || value,\n            disabled: props.disabled,\n            onChangeEvent: handleChange,\n            decimalSeparator: props.decimalSeparator,\n            thousandSeparator: props.thousandSeparator,\n            precision: props.precision,\n            inputType: props.inputType,\n            allowNegative: props.allowNegative\n          }}\n        />\n        {props.error ? (\n          <FormHelperText error={props.error}>\n            {props.helperText}\n          </FormHelperText>\n        ) : null}\n      </FormControl>\n    );\n  } else if (props.variant === 'filled') {\n    return (\n      <FormControl error={props.error} fullWidth>\n        <InputLabel error={props.error} shrink id={props.label}>\n          {props.label}\n        </InputLabel>\n        <FilledInput\n          name={props.name}\n          error={props.error}\n          fullWidth\n          inputComponent={CurrencyInput}\n          disabled={props.disabled}\n          onBlur={props.onBlur}\n          inputProps={{\n            id: props.id,\n            value: props.value || value,\n            disabled: props.disabled,\n            onChangeEvent: handleChange,\n            decimalSeparator: props.decimalSeparator,\n            thousandSeparator: props.thousandSeparator,\n            precision: props.precision,\n            inputType: props.inputType,\n            allowNegative: props.allowNegative\n          }}\n        />\n        {props.error ? (\n          <FormHelperText error={props.error}>\n            {props.helperText}\n          </FormHelperText>\n        ) : null}\n      </FormControl>\n    );\n  } else {\n    return (\n      <Control error={props.error} fullWidth>\n        <InputLabel error={props.error} shrink id={props.label}>\n          {props.label}\n        </InputLabel>\n        <OutlinedInput\n          name={props.name}\n          error={props.error}\n          notched\n          label={props.label}\n          fullWidth\n          inputComponent={CurrencyInput}\n          disabled={props.disabled}\n          onBlur={props.onBlur}\n          inputProps={{\n            id: props.id,\n            value: props.value || value,\n            disabled: props.disabled,\n            onChangeEvent: handleChange,\n            decimalSeparator: props.decimalSeparator,\n            thousandSeparator: props.thousandSeparator,\n            precision: props.precision,\n            inputType: props.inputType,\n            allowNegative: props.allowNegative\n          }}\n        />\n        {props.error ? (\n          <FormHelperText error={props.error}>\n            {props.helperText}\n          </FormHelperText>\n        ) : null}\n      </Control>\n    );\n  }\n};\n\nexport default NumericInput;\n\nconst Control = styled(FormControl)`\n  .MuiInputLabel-shrink {\n    transform: translate(13px, -5.5px) scale(0.75) !important;\n  }\n`;\n","import React from 'react';\nimport './index.css';\n\nimport NumericInput from 'material-ui-numeric-input';\n\nconst App = () => {\n  return (\n    <NumericInput\n      name='example'\n      precision='2'\n      decimalSeparator=','\n      thousandSeparator='.'\n      label='Example'\n      onChange={(value) => console.log(value)}\n      variant='outlined'\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}