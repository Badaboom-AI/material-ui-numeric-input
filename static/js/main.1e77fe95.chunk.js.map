{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["Control","styled","props","error","fullWidth","shrink","id","label","name","notched","inputComponent","CurrencyInput","disabled","onBlur","inputProps","value","onChangeEvent","number","e","parseFloat","setTimeout","event","decimalSeparator","thousandSeparator","precision","inputType","allowNegative","App","useState","setNumber","Number","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"ufAmGMA,EAAUC,YAAH,IAAGA,CAAH,Y,EAtE2BC,YAmCtC,OACE,qBAASC,MAAOD,EAAMC,MAAOC,WAAS,GACpC,uBAAYD,MAAOD,EAAMC,MAAOE,QAAM,EAACC,GAAIJ,EAAMK,OAC9CL,EAFL,OAIE,uBACEM,KAAMN,EAAMM,KACZL,MAAOD,EAAMC,MACbM,SAAO,EACPF,MAAOL,EAAMK,MACbH,WAAS,EACTM,eAAgBC,IAChBC,SAAUV,EAAMU,SAChBC,OAAQX,EAAMW,OACdC,WAAY,CACVR,GAAIJ,EADM,GAEVa,MAAOb,EAFG,MAGVU,SAAUV,EAHA,SAIVc,cApDR,YACE,IAAMC,EAASC,+CAAf,KAEA,GAAIhB,EAAJ,SACE,YAAIA,eACF,GAAIiB,cAAqBjB,EAAzB,aACEkB,YAAW,WACT,IAAMC,EAAN,EACAA,eAAqBnB,eAArBmB,WACAnB,gBAHFkB,SAKK,CACL,IAAMC,EAAN,EACAA,iBACAnB,mBAGF,QAAIgB,eAAuB,CACzB,IAAMG,EAAN,EACAA,iBACAnB,mBAEAkB,YAAW,WACT,IAAMC,EAAN,EACAA,mBACAnB,gBAHFkB,MA+BAE,iBALU,IAMVC,kBANU,IAOVC,UAAWtB,EAPD,UAQVuB,UAAWvB,EARD,UASVwB,cAAexB,EAAMwB,iBAGxBxB,QACC,uBAAgBC,MAAOD,EAAMC,OAAQD,EADtCA,YA1BL,OC7CayB,EAdH,WAAO,IAAD,EACYC,mBAAS,KADrB,mBACTX,EADS,KACDY,EADC,KAGhB,OACE,kBAAC,EAAD,CACEd,MAAOe,OAAOb,GACdT,KAAK,UACLgB,UAAU,IACVjB,MAAM,UACNwB,SAAU,SAACb,GAAD,OAAOW,EAAUX,EAAEc,OAAOjB,WCV1CkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1e77fe95.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport CurrencyInput from 'react-currency-input';\nimport {\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  OutlinedInput\n} from '@material-ui/core';\n\ntype Props = {\n  value?: number;\n  onChange?(\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void;\n  onBlur?(\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void;\n  precision: string;\n  label: string;\n  disabled?: boolean;\n  id?: string;\n  inputType?: string;\n  allowNegative?: boolean;\n  minimumValue?: number;\n  error?: boolean;\n  helperText?: string;\n  name?: string;\n};\nconst InputNumerico: React.FC<Props> = (props) => {\n  function changeValue(e: React.ChangeEvent<HTMLInputElement>): void {\n    const number = e.target.value.split('.').join('').replace(',', '.');\n\n    if (props.onChange) {\n      if (props.minimumValue !== undefined) {\n        if (parseFloat(number) < props.minimumValue) {\n          setTimeout(() => {\n            const event = e;\n            event.target.value = props.minimumValue!.toString();\n            props.onChange!(event);\n          }, 100);\n        } else {\n          const event = e;\n          event.target.value = number;\n          props.onChange!(event);\n        }\n      } else {\n        if (e.target.value !== '') {\n          const event = e;\n          event.target.value = number;\n          props.onChange!(event);\n        } else {\n          setTimeout(() => {\n            const event = e;\n            event.target.value = '0';\n            props.onChange!(event);\n          }, 100);\n        }\n      }\n    }\n  }\n\n  // TODO: make input multi variant\n  // TODO: solve a problem that cursor goes back two characters\n  return (\n    <Control error={props.error} fullWidth>\n      <InputLabel error={props.error} shrink id={props.label}>\n        {props.label}\n      </InputLabel>\n      <OutlinedInput\n        name={props.name}\n        error={props.error}\n        notched\n        label={props.label}\n        fullWidth\n        inputComponent={CurrencyInput}\n        disabled={props.disabled}\n        onBlur={props.onBlur}\n        inputProps={{\n          id: props.id,\n          value: props.value,\n          disabled: props.disabled,\n          onChangeEvent: changeValue,\n          decimalSeparator: ',',\n          thousandSeparator: '.',\n          precision: props.precision,\n          inputType: props.inputType,\n          allowNegative: props.allowNegative\n        }}\n      />\n      {props.error ? (\n        <FormHelperText error={props.error}>{props.helperText}</FormHelperText>\n      ) : null}\n    </Control>\n  );\n};\n\nexport default InputNumerico;\n\nconst Control = styled(FormControl)`\n  .MuiInputLabel-shrink {\n    transform: translate(13px, -5.5px) scale(0.75) !important;\n  }\n`;\n","import React, { useState } from 'react';\nimport './index.css';\n\nimport NumericInput from 'material-ui-numeric-input';\n\nconst App = () => {\n  const [number, setNumber] = useState('0');\n\n  return (\n    <NumericInput\n      value={Number(number)}\n      name='example'\n      precision='2'\n      label='Example'\n      onChange={(e) => setNumber(e.target.value)}\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}