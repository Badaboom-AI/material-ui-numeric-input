{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["props","useState","value","setValue","newValue","Number","e","color","error","fullWidth","shrink","id","label","name","inputComponent","CurrencyInput","disabled","onBlur","inputProps","onChangeEvent","decimalSeparator","thousandSeparator","precision","inputType","allowNegative","endAdornment","startAdornment","notched","App","onChange","console","log","variant","ReactDOM","render","document","getElementById"],"mappings":"oUAiCsC,SAACA,GACrC,MAA0BC,mBAA1B,GAAOC,EAAP,KAAcC,EAAd,KAEA,cACE,IAAMC,EAAWC,OACfC,qBACSN,EADTM,oCAGWN,EAHXM,iBADF,MAOAH,KACAH,cAGF,OAAKA,EAAD,SAAJ,aAAsBA,UAmCf,WAAIA,UAEP,uBAAaO,MAAOP,EAAMO,MAAOC,MAAOR,EAAMQ,MAAOC,WAAS,GAC5D,uBAAYD,MAAOR,EAAMQ,MAAOE,QAAM,EAACC,GAAIX,EAAMY,OAC9CZ,EAFL,OAIE,uBACEa,KAAMb,EAAMa,KACZL,MAAOR,EAAMQ,MACbC,WAAS,EACTK,eAAgBC,IAChBC,SAAUhB,EAAMgB,SAChBC,OAAQjB,EAAMiB,OACdV,MAAOP,EAAMO,MACbW,WAAY,CACVP,GAAIX,EADM,GAEVE,MAAOF,SAFG,EAGVgB,SAAUhB,EAHA,SAIVmB,cAJU,EAKVC,iBAAkBpB,EALR,iBAMVqB,kBAAmBrB,EANT,kBAOVsB,UAAWtB,EAPD,UAQVuB,UAAWvB,EARD,UASVwB,cAAexB,EAAMwB,eAEvBC,aAAczB,EAAMyB,aACpBC,eAAgB1B,EAAM0B,iBAEvB1B,QACC,uBAAgBQ,MAAOR,EAAMQ,OAC1BR,EAFJA,YA3BL,MAoCE,uBAAaO,MAAOP,EAAMO,MAAOC,MAAOR,EAAMQ,MAAOC,WAAS,GAC5D,uBAAYD,MAAOR,EAAMQ,MAAOE,QAAM,EAACC,GAAIX,EAAMY,OAC9CZ,EAFL,OAIE,uBACEa,KAAMb,EAAMa,KACZL,MAAOR,EAAMQ,MACbmB,SAAO,EACPf,MAAOZ,EAAMY,MACbH,WAAS,EACTK,eAAgBC,IAChBC,SAAUhB,EAAMgB,SAChBC,OAAQjB,EAAMiB,OACdV,MAAOP,EAAMO,MACbW,WAAY,CACVP,GAAIX,EADM,GAEVE,MAAOF,SAFG,EAGVgB,SAAUhB,EAHA,SAIVmB,cAJU,EAKVC,iBAAkBpB,EALR,iBAMVqB,kBAAmBrB,EANT,kBAOVsB,UAAWtB,EAPD,UAQVuB,UAAWvB,EARD,UASVwB,cAAexB,EAAMwB,eAEvBC,aAAczB,EAAMyB,aACpBC,eAAgB1B,EAAM0B,iBAEvB1B,QACC,uBAAgBQ,MAAOR,EAAMQ,OAC1BR,EAFJA,YA7BL,MArEE,uBAAaO,MAAOP,EAAMO,MAAOC,MAAOR,EAAMQ,MAAOC,WAAS,GAC5D,uBAAYD,MAAOR,EAAMQ,MAAOE,QAAM,EAACC,GAAIX,EAAMY,OAC9CZ,EAFL,OAIE,uBACEa,KAAMb,EAAMa,KACZL,MAAOR,EAAMQ,MACbC,WAAS,EACTK,eAAgBC,IAChBC,SAAUhB,EAAMgB,SAChBC,OAAQjB,EAAMiB,OACdV,MAAOP,EAAMO,MACbW,WAAY,CACVP,GAAIX,EADM,GAEVE,MAAOF,SAFG,EAGVgB,SAAUhB,EAHA,SAIVmB,cAJU,EAKVC,iBAAkBpB,EALR,iBAMVqB,kBAAmBrB,EANT,kBAOVsB,UAAWtB,EAPD,UAQVuB,UAAWvB,EARD,UASVwB,cAAexB,EAAMwB,eAEvBC,aAAczB,EAAMyB,aACpBC,eAAgB1B,EAAM0B,iBAEvB1B,QACC,uBAAgBQ,MAAOR,EAAMQ,OAC1BR,EAFJA,YA3BL,OC9BW4B,EAdH,WACV,OACE,kBAAC,EAAD,CACEf,KAAK,UACLS,UAAU,IACVF,iBAAiB,IACjBC,kBAAkB,IAClBT,MAAM,UACNiB,SAAU,SAAC3B,GAAD,OAAW4B,QAAQC,IAAI7B,IACjC8B,QAAQ,cCVdC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0d459713.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport CurrencyInput from 'react-currency-input';\nimport FormControl from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Input from '@mui/material/Input';\nimport FilledInput from '@mui/material/FilledInput';\n\ntype Props = {\n  value?: number;\n  onChange(value: number): void;\n  onBlur?(\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void;\n  precision: string;\n  label: string;\n  disabled?: boolean;\n  id?: string;\n  inputType?: string;\n  allowNegative?: boolean;\n  error?: boolean;\n  helperText?: string;\n  name?: string;\n  color?: 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';\n  startAdornment?: React.ReactNode;\n  endAdornment?: React.ReactNode;\n\n  decimalSeparator: string;\n  thousandSeparator: string;\n\n  variant?: 'standard' | 'outlined' | 'filled';\n};\nconst NumericInput: React.FC<Props> = (props) => {\n  const [value, setValue] = useState(0);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = Number(\n      e.target.value\n        .split(props.thousandSeparator)\n        .join('')\n        .replace(props.decimalSeparator, '.')\n    );\n\n    setValue(newValue);\n    props.onChange(newValue);\n  }\n\n  if (!props.variant || props.variant === 'standard') {\n    return (\n      <FormControl color={props.color} error={props.error} fullWidth>\n        <InputLabel error={props.error} shrink id={props.label}>\n          {props.label}\n        </InputLabel>\n        <Input\n          name={props.name}\n          error={props.error}\n          fullWidth\n          inputComponent={CurrencyInput}\n          disabled={props.disabled}\n          onBlur={props.onBlur}\n          color={props.color}\n          inputProps={{\n            id: props.id,\n            value: props.value || value,\n            disabled: props.disabled,\n            onChangeEvent: handleChange,\n            decimalSeparator: props.decimalSeparator,\n            thousandSeparator: props.thousandSeparator,\n            precision: props.precision,\n            inputType: props.inputType,\n            allowNegative: props.allowNegative\n          }}\n          endAdornment={props.endAdornment}\n          startAdornment={props.startAdornment}\n        />\n        {props.error ? (\n          <FormHelperText error={props.error}>\n            {props.helperText}\n          </FormHelperText>\n        ) : null}\n      </FormControl>\n    );\n  } else if (props.variant === 'filled') {\n    return (\n      <FormControl color={props.color} error={props.error} fullWidth>\n        <InputLabel error={props.error} shrink id={props.label}>\n          {props.label}\n        </InputLabel>\n        <FilledInput\n          name={props.name}\n          error={props.error}\n          fullWidth\n          inputComponent={CurrencyInput}\n          disabled={props.disabled}\n          onBlur={props.onBlur}\n          color={props.color}\n          inputProps={{\n            id: props.id,\n            value: props.value || value,\n            disabled: props.disabled,\n            onChangeEvent: handleChange,\n            decimalSeparator: props.decimalSeparator,\n            thousandSeparator: props.thousandSeparator,\n            precision: props.precision,\n            inputType: props.inputType,\n            allowNegative: props.allowNegative\n          }}\n          endAdornment={props.endAdornment}\n          startAdornment={props.startAdornment}\n        />\n        {props.error ? (\n          <FormHelperText error={props.error}>\n            {props.helperText}\n          </FormHelperText>\n        ) : null}\n      </FormControl>\n    );\n  } else {\n    return (\n      <FormControl color={props.color} error={props.error} fullWidth>\n        <InputLabel error={props.error} shrink id={props.label}>\n          {props.label}\n        </InputLabel>\n        <OutlinedInput\n          name={props.name}\n          error={props.error}\n          notched\n          label={props.label}\n          fullWidth\n          inputComponent={CurrencyInput}\n          disabled={props.disabled}\n          onBlur={props.onBlur}\n          color={props.color}\n          inputProps={{\n            id: props.id,\n            value: props.value || value,\n            disabled: props.disabled,\n            onChangeEvent: handleChange,\n            decimalSeparator: props.decimalSeparator,\n            thousandSeparator: props.thousandSeparator,\n            precision: props.precision,\n            inputType: props.inputType,\n            allowNegative: props.allowNegative\n          }}\n          endAdornment={props.endAdornment}\n          startAdornment={props.startAdornment}\n        />\n        {props.error ? (\n          <FormHelperText error={props.error}>\n            {props.helperText}\n          </FormHelperText>\n        ) : null}\n      </FormControl>\n    );\n  }\n};\n\nexport default NumericInput;\n","import React from 'react';\nimport './index.css';\n\nimport NumericInput from 'material-ui-numeric-input';\n\nconst App = () => {\n  return (\n    <NumericInput\n      name='example'\n      precision='2'\n      decimalSeparator=','\n      thousandSeparator='.'\n      label='Example'\n      onChange={(value) => console.log(value)}\n      variant='outlined'\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}